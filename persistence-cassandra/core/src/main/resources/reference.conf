
#//#persistence-read-side
lagom.persistence.read-side {

  cassandra {

    # keyspace must be provided by application.conf
    keyspace = null

    # Parameter indicating whether the read-side keyspace should be auto created
    keyspace-autocreate = true

    # Parameter indicating whether the read-side tables should be auto created
    tables-autocreate = true

    session-provider = com.lightbend.lagom.internal.persistence.cassandra.ServiceLocatorSessionProvider
    // ${akka.persistence.cassandra.session-provider}

    service-discovery = ${akka.persistence.cassandra.service-discovery}

    datastax-java-driver-config = ${akka.persistence.cassandra.datastax-java-driver-config}

    read-profile = ${akka.persistence.cassandra.read-profile}

    write-profile = ${akka.persistence.cassandra.write-profile}

    # replication strategy to use. SimpleStrategy or NetworkTopologyStrategy
    replication-strategy = "SimpleStrategy"

    # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
    replication-factor = 1

    # Replication factor list for data centers, e.g. ["dc1:3", "dc2:2"]. Is only used when replication-strategy is NetworkTopologyStrategy.
    data-center-replication-factors = []

  }

}

lagom.defaults.persistence.read-side.cassandra {
  # Port of contact points in the Cassandra cluster
  port = 9042
}


#//#persistence-read-side

lagom.persistence.cosmosdb {

  # Copied from: https://github.com/David-Noble-at-work/azure-cosmos-cassandra-extensions/tree/release/java-driver-4/1.1.2/driver-4/src/main/resources

  # Azure Cosmos Extensions for DataStax Java Driver 4 for Apache Cassandra reference configuration
  #
  # Override the values provided here to match your environment and preferences. The default values set here are known to
  # work well with the Cosmos Cassandra API. For a general discussion of DataStax Java Driver 4 configuration, see
  # https://docs.datastax.com/en/developer/java-driver/4.9/manual/core/configuration/

  datastax-java-driver {
    advanced {

      # Whether to schedule reconnection attempts if all contact points are unreachable on the first
      # initialization attempt.
      reconnect-on-init = true

      auth-provider {
        # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the PlainTextAuthProvider is used by
        # default. This is because the Cosmos DB Cassandra API requires authentication and uses plain text authentication
        # by default.
        class = PlainTextAuthProvider
      }
      connection {
        pool {
          # Cosmos DB load-balances requests against a large number of backend nodes. Experiments show that these values
          # for local and remote node sizes work well in development, test, and low-volume production or staging
          # environments. You should increase these values based on the RUs provisioned for your database.
          #
          #   RUs      | local.size | remote.size
          #   ---------+------------+-------------
          #   100,000  | 50-100     | 50-100
          #   200,000+ | 100        | 100
          local.size = 10
          remote.size = 10
        }
      }
      metadata {
        token-map {
          # Token maps are disabled because they are not relevant to routing when DataStax Java Driver 4 is used to access
          # a Cosmos Cassandra instance. You will see this spurious warning message in the logs when token-map.enabled is
          # true:
          #
          #   [<session-name>] Unexpected error while refreshing token map, keeping previous version
          #   (IllegalArgumentException: Multiple entries with same key: Murmur3Token...
          enabled = false
        }
      }
      reconnection-policy {
        # The driver provides two implementations out of the box: ExponentialReconnectionPolicy and
        # ConstantReconnectionPolicy. We recommend ConstantReconnectionPolicy for Cassandra API, with its default
        # base-delay of 1 seconds.
        class = com.datastax.oss.driver.internal.core.connection.ConstantReconnectionPolicy
      }
      retry-policy {
        # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions CosmosRetryPolicy is used by default.
        # This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
        class = com.azure.cosmos.cassandra.CosmosRetryPolicy
        max-retries = 5               # Maximum number of retries.
        fixed-backoff-time = 5000     # Fixed backoff time in milliseconds.
        growing-backoff-time = 1000   # Growing backoff time in milliseconds.
        read-timeout-retries = true   # Whether retries on read timeouts are enabled. Disabling read timeouts may be
        # desirable when Cosmos Cassanra API server-side retries are enabled.
        write-timeout-retries = true  # Whether retries on write timeouts are enabled. Disabling write timeouts may be
        # desirable when Cosmos Cassandra API server-side retries are enabled.
      }
      ssl-engine-factory {
        # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the DefaultSslEngineFactory is used by
        # default. The Cosmos Cassandra API requires SSL.
        class = DefaultSslEngineFactory
      }
    }
    basic {

      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions use the address of a local instance of
      # the Azure Cosmos DB Emulator for development and testing as the contact point.

      // contact-points = [ "localhost:10350" ]

      load-balancing-policy {

        # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the CosmosLoadBalancingPolicy is used
        # by default. This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
        class = com.azure.cosmos.cassandra.CosmosLoadBalancingPolicy
        multi-region-writes = false
        preferred-regions = []

        # DNS expiry time in seconds

        // dns-expiry-time = 60

        # Global endpoint for connecting to Cosmos
        #
        #   When global-endpoint is specified, you may specify a read-datacenter, but must not specify a write-datacenter.
        #   Writes will go to the default write region when global-endpoint is specified. When global-endpoint is not
        #   specified, you must provide both a read-datacenter and a write-datacenter.
        #
        #   We use the address of a local instance of the Azure Cosmos DB Emulator for development and testing as the
        #   default global-endpoint.

        // global-endpoint = "localhost:10350"
        // read-datacenter = ""
        // write-datacenter = ""
      }
      request {
        # A request timeout of 5 seconds provides a better out-of-box experience than the default value of 2 seconds.
        # Adjust this value up or down based on workload and Cosmos Cassandra througput provisioning. The more
        # throughput you provision, the lower you might set this value.
        timeout = 90 seconds
      }
    }
  }

}
